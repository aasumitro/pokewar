// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// IParam is an autogenerated mock type for the IParam type
type IParam struct {
	mock.Mock
}

// ParseParam provides a mock function with given fields: ctx
func (_m *IParam) ParseParam(ctx *gin.Context) ([]int, []string) {
	ret := _m.Called(ctx)

	var r0 []int
	if rf, ok := ret.Get(0).(func(*gin.Context) []int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func(*gin.Context) []string); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewIParam interface {
	mock.TestingT
	Cleanup(func())
}

// NewIParam creates a new instance of IParam. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIParam(t mockConstructorTestingTNewIParam) *IParam {
	mock := &IParam{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
