// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/aasumitro/pokewar/domain"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/aasumitro/pokewar/pkg/utils"
)

// IPokewarService is an autogenerated mock type for the IPokewarService type
type IPokewarService struct {
	mock.Mock
}

// AddBattle provides a mock function with given fields: param
func (_m *IPokewarService) AddBattle(param domain.Battle) *utils.ServiceError {
	ret := _m.Called(param)

	var r0 *utils.ServiceError
	if rf, ok := ret.Get(0).(func(domain.Battle) *utils.ServiceError); ok {
		r0 = rf(param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ServiceError)
		}
	}

	return r0
}

// AnnulledPlayer provides a mock function with given fields: playerId
func (_m *IPokewarService) AnnulledPlayer(playerId int) (int64, *utils.ServiceError) {
	ret := _m.Called(playerId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int) int64); ok {
		r0 = rf(playerId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func(int) *utils.ServiceError); ok {
		r1 = rf(playerId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// BattlesCount provides a mock function with given fields:
func (_m *IPokewarService) BattlesCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// FetchBattles provides a mock function with given fields: args
func (_m *IPokewarService) FetchBattles(args ...string) ([]*domain.Battle, *utils.ServiceError) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*domain.Battle
	if rf, ok := ret.Get(0).(func(...string) []*domain.Battle); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Battle)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func(...string) *utils.ServiceError); ok {
		r1 = rf(args...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// FetchMonsters provides a mock function with given fields: args
func (_m *IPokewarService) FetchMonsters(args ...string) ([]*domain.Monster, *utils.ServiceError) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*domain.Monster
	if rf, ok := ret.Get(0).(func(...string) []*domain.Monster); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Monster)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func(...string) *utils.ServiceError); ok {
		r1 = rf(args...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// FetchRanks provides a mock function with given fields: args
func (_m *IPokewarService) FetchRanks(args ...string) ([]*domain.Rank, *utils.ServiceError) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*domain.Rank
	if rf, ok := ret.Get(0).(func(...string) []*domain.Rank); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Rank)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func(...string) *utils.ServiceError); ok {
		r1 = rf(args...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// MonstersCount provides a mock function with given fields:
func (_m *IPokewarService) MonstersCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// PrepareMonstersForBattle provides a mock function with given fields:
func (_m *IPokewarService) PrepareMonstersForBattle() ([]*domain.Monster, *utils.ServiceError) {
	ret := _m.Called()

	var r0 []*domain.Monster
	if rf, ok := ret.Get(0).(func() []*domain.Monster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Monster)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func() *utils.ServiceError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// SyncMonsters provides a mock function with given fields: args
func (_m *IPokewarService) SyncMonsters(args ...string) ([]*domain.Monster, *utils.ServiceError) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*domain.Monster
	if rf, ok := ret.Get(0).(func(...string) []*domain.Monster); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Monster)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func(...string) *utils.ServiceError); ok {
		r1 = rf(args...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewIPokewarService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPokewarService creates a new instance of IPokewarService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPokewarService(t mockConstructorTestingTNewIPokewarService) *IPokewarService {
	mock := &IPokewarService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
